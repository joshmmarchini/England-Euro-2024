---
title: "Gareth Southgate brought England to the Final in Euro 2024 – but they are right to find a new approach to winning the World Cup in 2026."
author: Josh Marchini
date: "2025-07-01"
format: 
  html:
    title-block-style: default
editor: visual
fig-responsive: false
---

Having not won a major trophy since 1966, England was the favorite entering Euro 2024. Just days before England’s opening match against Serbia, [Sports Betting Dime](https://www.sportsbettingdime.com/soccer/futures/euro-championship-odds) listed England at +299 to win the Euro.

They were favorites because of their ***attacking talent***. Phil Foden had just won Premier League Player of the Season, Jude Bellingham led Real Madrid to Champions League glory in his first season with the club, Harry Kane led the Bundesliga in scoring, and everyone was comparing Bukayo Saka to Mohamed Salah (and by everyone I mean me). This was truly a golden generation and a chance for England to win a major trophy.

But when the tournament began, England's attack was lackluster and inefficient. Why?

I explored this question by comparing England's Euro 2024 performance to the other 15 teams that advanced to the knockout stage and to the eight teams who advanced to the knockout stage in Copa America 2024. All data used for this analysis came from [StatsBomb](https://www.hudl.com/en_gb/products/statsbomb) public data.

In terms of non-penalty expected goals (xG) and shots per 90, England ranked near the bottom.

```{=html}
<!--
## Load libraries
-->
```

```{r include=FALSE}
# Load necessary libraries

rm(list = ls()) # Clear workspace
options(scipen = 999)  # Avoid scientific notation

library(StatsBombR)
library(tidyverse)
library(readr)
library(writexl)
library(lubridate)
library(ggforce) # for coord_curvedpolar() in radar chart
library(hms) # Added to convert timestamp to time object
library(grid) # for heat maps
library(cowplot)
library(grid) # For heatmap
library(xfun)
library(ggtext)
library(purrr)
library(tibble)
library(SBpitch) # For drawing passing network pitch
library(scales) # For dynamic headers

# Function for Euclidean Distance
euclidean_distance <- function(x1, x2, y1, y2) {
  sqrt((x2-x1)^2 + (y2-y1)^2)
}

# Test

```

```{=html}
<!--
## Load data: Euro & Copa America 2024
-->
```

```{r include=FALSE}
# Load Euro & Copa America 2024 data

comp <- FreeCompetitions() %>%
  filter(
    (competition_id == 55 & season_id == 282) | # Euro 2024
    (competition_id == 223 & season_id == 282)  # Copa America 2024
  ) 

# Show all matches during season
dim_match <- FreeMatches(comp)

#Pull all event data for the matches that are chosen
fact_event <- free_allevents(MatchesDF = dim_match, Parallel = T)

# Function to clean data
fact_event <- allclean(fact_event)

# Sort events data
fact_event <- fact_event %>%
  arrange(competition_id, season_id, match_id, period, timestamp)

# Check dim_match versus fact_event
length(unique(fact_event$match_id))

# New column of time stamp for time difference calculations
fact_event$timestamp_mmss <- substr(fact_event$timestamp, 4, 8)

fact_event <- fact_event %>%
  relocate(timestamp_mmss, .after = timestamp)

fact_event$timestamp_sec <- as.numeric(ms(fact_event$timestamp_mmss))

fact_event <- fact_event %>%
  relocate(timestamp_sec, .after = timestamp_mmss)

# New columns in fact_event: home team name away team name
# Do not run more than once
fact_event <- fact_event %>%
  left_join(
    dim_match %>% 
      select(match_id, home_team.home_team_name, away_team.away_team_name), 
    by = "match_id"
  )

```

```{=html}
<!--
## Total minutes per team dataset (team_mins)
-->
```

```{r include=FALSE}

# match_id, total_minutes
team_mins <- fact_event %>%
  group_by(match_id, period) %>%
  summarise(period_duration = max(timestamp_sec, na.rm = TRUE), .groups = "drop") %>%
  arrange(match_id, period) %>%
  group_by(match_id) %>%
  summarise(total_sec = sum(period_duration), .groups = "drop") %>%
  mutate(total_mins = total_sec / 60) %>%
  select(match_id, total_mins)

# Get home team and away team for each match
team_mins <- team_mins %>%
  left_join(dim_match %>% select(match_id, home_team.home_team_name, away_team.away_team_name))

# Pivot longer  
team_mins <- team_mins %>%
  pivot_longer(cols = c(home_team.home_team_name, away_team.away_team_name),
               names_to = "home_or_away",
               values_to = "team") %>%
  select(match_id, team, total_mins) 

# Bring in competition_id
team_mins <- team_mins %>%
  left_join(dim_match %>% select(match_id, competition.competition_id), by = "match_id")
  
# Get data set: team, total_mins
team_mins <- team_mins %>%
  group_by(competition.competition_id, team) %>%
  summarise(total_mins = sum(total_mins), .groups = "drop")
  

# Create a data frame of Round of 16 teams
round_of_16_teams <- c(
  "England", "Spain", "Argentina", "Colombia", "France", "Canada", "Uruguay",
  "Netherlands", "Portugal", "Germany", "Switzerland", "Turkey", "Slovakia",
  "Slovenia", "Ecuador", "Brazil", "Venezuela", "Italy", "Georgia", "Austria",
  "Panama", "Denmark", "Romania", "Belgium"
)

team_mins <- team_mins %>%
  mutate(rd_16 = if_else(team %in% round_of_16_teams, 1, 0))

# England identifier column
team_mins <- team_mins %>%
  mutate(england = if_else(team == "England", 1, 0))
```

```{=html}
<!--
## Player positions (player_positions dataset)
-->
```

```{r include=FALSE}

player_position <- fact_event %>%
  select(team.name, player.name, position.name) %>%
  distinct() %>%
  group_by(team.name, player.name) %>%
  arrange(position.name, .by_group = TRUE) %>%
  summarise(positions = str_c(unique(position.name), collapse = ", "), .groups = "drop") %>%
  mutate(team_player = paste(team.name, player.name, sep = "_")) %>%
  arrange(team.name, player.name)
  
```

```{=html}
<!--
## xG per 90 by team dataset
-->
```

```{r include=FALSE}
# Non penalty xG per team
team_np_xG <- fact_event %>%
  filter(type.name == "Shot" &
           (shot.type.name!="Penalty" | is.na(shot.type.name))) %>%
  group_by(team.name) %>%
  summarise(np_xG = sum(shot.statsbomb_xg), .groups = "drop")

# Bring in total minutes, xG per 90
team_np_xG <- team_np_xG %>%
  left_join(team_mins, by = c("team.name" = "team"))

# New column: xG per 90 
team_np_xG <- team_np_xG %>%
  mutate(np_xG_per_90 = (np_xG / total_mins) * 90)


# Round of 16 dataset
team_np_xG_16 <- team_np_xG %>%
  filter(rd_16 == 1)
```

```{=html}
<!--
## shots per 90 by team dataset (rd of 16)
-->
```

```{r include=FALSE}

# Non penalty shots
team_shots <- fact_event %>%
  group_by(team.name) %>%
  summarise(
    shots = sum(type.name=="Shot", na.rm = TRUE))

# Bring in total minutes, xG per 90
team_shots <- team_shots %>%
  left_join(team_mins, by = c("team.name" = "team"))

# New column: shots per 90 
team_shots <- team_shots %>%
  mutate(shots_per_90 = (shots / total_mins) * 90)


# Round of 16 dataset
team_shots_16 <- team_shots %>%
  filter(rd_16 == 1)
```

```{=html}
<!--
## xG per Shot by team dataset (rd of 16)
-->
```

```{r include=FALSE}

np_xG_shot <- team_mins %>%
  select(team, rd_16, england) %>%
  left_join(team_np_xG %>% select(team.name, np_xG), by = c("team" = "team.name")) %>%
  left_join(team_shots %>% select(team.name, shots), by = c("team" = "team.name")) %>%
  mutate(np_xG_per_shot = np_xG / shots)

np_xG_shot_16 <- np_xG_shot %>%
  filter(rd_16 == 1)
```

```{=html}
<!--
## Clear shots by team dataset (rd of 16)
-->
```

```{r include=FALSE}

# Non penalty clear shots
clear_shots <- fact_event %>%
  # Filter to only include shots
  filter(type.name == "Shot", is.na(under_pressure) & (shot.type.name!="Penalty" | is.na(shot.type.name))) %>%
  group_by(team.name) %>%
  summarise(
    clear_shots = n(),
    .groups = "drop"
  )

# Bring in total minutes
clear_shots <- clear_shots %>%
  left_join(team_mins, by = c("team.name" = "team"))

# Calculate clear shots per 90
clear_shots <- clear_shots %>%
  mutate(clear_shots_per_90 = (clear_shots / total_mins) * 90)

# Round of 16
clear_shots_16 <- clear_shots %>%
  filter(rd_16 == 1)
```

```{=html}
<!--
## Np xG per 90 & shots per 90 (Viz)
-->
```

```{r, warning=FALSE, echo=FALSE}

# non-penalty xG per 90
p1 <- ggplot(data = team_np_xG_16, aes(x = np_xG_per_90, y = reorder(team.name, np_xG_per_90), fill = factor(england))) +
  geom_bar(stat = "identity") +
  geom_text(
    data = subset(team_np_xG_16, england == 1),
    aes(label = round(np_xG_per_90, 2)),
    hjust = -0.3,
    fontfact = "bold",
    color = "navy",
    size = 5) +  # Adjust position to your liking
  scale_fill_manual(values = c("1" = "navy", "0" = "gray")) +
  labs(
    title = "Non-Penalty xG per 90"
    ) +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(color = "navy", face = "bold", size = 10, hjust = -0.5, vjust = 2)
    )

# shots per 90
p2 <- ggplot(data = team_shots_16, aes(x = shots_per_90, y = reorder(team.name, shots_per_90), fill = factor(england))) +
  geom_bar(stat = "identity") +
  geom_text(
    data = subset(team_shots_16, england == 1),
    aes(label = round(shots_per_90, 2)),
    hjust = -0.5,
    fontfact = "bold",
    color = "navy",
    size = 5) +
  scale_fill_manual(values = c("1" = "navy", "0" = "gray")) +
  labs(title = "Shots Per 90") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(color = "navy", face = "bold", size = 10, hjust = -0.3, vjust = 2)
    )

# Non-penalty xG per shot
p3 <- ggplot(data = np_xG_shot_16, aes(x = np_xG_per_shot, y = reorder(team, np_xG_per_shot), fill = factor(england))) +
  geom_bar(stat = "identity") +
  geom_text(
    data = subset(np_xG_shot_16, england == 1),
    aes(label = round(np_xG_per_shot, 2)),
    hjust = -0.3,
    fontfact = "bold",
    color = "navy",
    size = 5) +  # Adjust position to your liking
  scale_fill_manual(values = c("1" = "navy", "0" = "gray")) +
  labs(title = "Non-Penalty xG per Shot") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(color = "navy", face = "bold", size = 10, hjust = -0.3, vjust = 2)
    )

# Clear shots per 90
p4 <- ggplot(data = clear_shots_16, aes(x = clear_shots_per_90, y = reorder(team.name, clear_shots_per_90), fill = factor(england))) +
  geom_bar(stat = "identity") +
  geom_text(
    data = subset(clear_shots_16, england == 1),
    aes(label = round(clear_shots_per_90, 2)),
    hjust = -0.3,
    fontfact = "bold",
    color = "navy",
    size = 5) +  # Adjust position to your liking
  scale_fill_manual(values = c("1" = "navy", "0" = "gray")) +
  labs(title = "Clear Shots per 90") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(color = "navy", face = "bold", size = 10, hjust = -0.14, vjust = 2)
    )

# 2 x 2 cowplot

grid <- plot_grid(p2, p1, ncol = 2)

# Title and subtitle
title <- ggdraw() +
  draw_label("England struggled to create quality chances", 
             fontface = 'bold', size = 14, x = 0, hjust = 0, y = 0.5) +
  draw_label("Euro & Copa America 2024 | Teams that advanced to the knockout stage", 
             size = 10, x = 0, hjust = 0, y = 0.2)


# Combine title and grid
final_plot <- plot_grid(title, grid, ncol = 1, rel_heights = c(0.25, 1))
print(final_plot)

```

So let's try to answer why, despite their wealth of attacking talent, England struggled to create chances and score goals.

## England's Defensive Approach

Gareth Southgate was a defensively-minded coach, and the argument can be made that England's low attacking output was a worthwhile trade-off for defensive solidity. Although England did press centrally at times, they primarily defended in a mid-block, prioritizing staying compact in the midfield.

```{=html}
<!--
## Dataset: Defensive actions for England vs other knock out
-->
```

```{r include=FALSE}

#library(grid)

heatmap <- fact_event %>%
mutate(
  location.x = ifelse(location.x>120, 120, location.x),
  location.y = ifelse(location.y>80, 80, location.y),
  location.x = ifelse(location.x<0, 0, location.x),
  location.y = ifelse(location.y<0, 0, location.y)
  ) %>%
left_join(team_mins %>% select(team, rd_16), by = c("team.name" = "team")) %>%
filter(rd_16 == 1)

heatmap$xbin <- cut(heatmap$location.x, breaks = seq(from=0, to=120, by = 20),include.lowest=TRUE )
heatmap$ybin <- cut(heatmap$location.y, breaks = seq(from=0, to=80, by = 20),include.lowest=TRUE)

heatmap <- heatmap %>%
filter(
  type.name=="Pressure" | duel.type.name=="Tackle" | type.name=="Foul Committed" |
    type.name=="Interception" | type.name=="Block" ) %>%
group_by(team.name) %>%
mutate(total_DA = n()) %>% # New column: total defensive actions for each team
group_by(team.name, xbin, ybin) %>%
summarise(total_DA = max(total_DA),
            bin_DA = n(),
            bin_pct = bin_DA/total_DA,
            location.x = median(location.x),
            location.y = median(location.y)) %>%
  group_by(xbin, ybin) %>%
  mutate(league_ave = mean(bin_pct)) %>%
  group_by(team.name, xbin, ybin) %>%
  mutate(diff_vs_ave = bin_pct - league_ave)



defensiveactivitycolors <- c("#dc2429", "#dc2329", "#df272d", "#df3238", "#e14348", "#e44d51",
                             "#e35256", "#e76266", "#e9777b", "#ec8589", "#ec898d", "#ef9195",
                             "#ef9ea1", "#f0a6a9", "#f2abae", "#f4b9bc", "#f8d1d2", "#f9e0e2",
                             "#f7e1e3", "#f5e2e4", "#d4d5d8", "#d1d3d8", "#cdd2d6", "#c8cdd3", "#c0c7cd",
                             "#b9c0c8", "#b5bcc3", "#909ba5", "#8f9aa5", "#818c98", "#798590",
                             "#697785", "#526173", "#435367", "#3a4b60", "#2e4257", "#1d3048",
                             "#11263e", "#11273e", "#0d233a", "#020c16")


```

```{=html}
<!--
## Viz defensive actions England
-->
```

```{r, warning=FALSE, echo=FALSE}

# Defensive pressure heatmap for England
ggplot(data = heatmap %>% filter(team.name == "England"), 
       aes(x = location.x, y = location.y, fill = diff_vs_ave, group=diff_vs_ave)) +
  geom_bin2d(binwidth = c(20, 20), alpha = 0.9) +
  annotate("rect", xmin = 0, xmax = 120, ymin = 0, ymax = 80, colour = "black", fill = NA, size = 0.6) +
  annotate("rect", xmin = 0, xmax = 60, ymin = 0, ymax = 80, colour = "black", fill = NA, size = 0.6) +
  annotate("rect", xmin = 18, xmax = 0, ymin = 18, ymax = 62, colour = "white", fill = NA, size = 0.6) +
  annotate("rect", xmin = 102, xmax = 120, ymin = 18, ymax = 62, colour = "white", fill = NA, size = 0.6) +
  annotate("rect", xmin = 0, xmax = 6, ymin = 30, ymax = 50, colour = "white", fill = NA, size = 0.6) +
  annotate("rect", xmin = 120, xmax = 114, ymin = 30, ymax = 50, colour = "white", fill = NA, size = 0.6) +
  annotate("rect", xmin = 120, xmax = 120.5, ymin = 36, ymax = 44, colour = "black", fill = NA, size = 0.6) +
  annotate("rect", xmin = 0, xmax = -0.5, ymin = 36, ymax = 44, colour = "black", fill = NA, size = 0.6) +
  annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "white", size = 0.6) +
  annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6) +
  annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6) +
  annotate("point", x = 12, y = 40, colour = "white", size = 1.05) +
  annotate("point", x = 108, y = 40, colour = "white", size = 1.05) +
  annotate("path", x = 60 + 10 * cos(seq(0, 2 * pi, length.out = 2000)),
           y = 40 + 10 * sin(seq(0, 2 * pi, length.out = 2000)), colour = "white", size = 0.6) +
  annotate("point", x = 60, y = 40, colour = "white", size = 1.05) +
  annotate("path", x = 12 + 10 * cos(seq(-0.3 * pi, 0.3 * pi, length.out = 30)),
           y = 40 + 10 * sin(seq(-0.3 * pi, 0.3 * pi, length.out = 30)), col = "white", size = 0.6) +
  annotate("path", x = 108 - 10 * cos(seq(-0.3 * pi, 0.3 * pi, length.out = 30)),
           y = 40 - 10 * sin(seq(-0.3 * pi, 0.3 * pi, length.out = 30)), col = "white", size = 0.6) +
  scale_y_reverse() + 
  scale_fill_gradientn(
    colours = defensiveactivitycolors,
    trans = "reverse",
    labels = scales::percent_format(accuracy = 1),
    limits = c(0.03, -0.03)
  ) +
  coord_fixed(ratio = 95/100) +
  annotation_custom(
    grob = linesGrob(
      arrow = arrow(type = "open", ends = "last", length = unit(2.55, "mm")),
      gp = gpar(col = "black", fill = NA, lwd = 2.2)
    ),
    xmin = 25, xmax = 95, ymin = -83, ymax = -83
  ) +
  labs(
    title = "England pressured the ball most often in the midfield",
    subtitle = "Euro & Copa America 2024 | Defensive events vs other teams in the knockout stage",
    fill = "+/- Overall Median"
  ) +
  theme_minimal() +
  theme(
  panel.background = element_rect(fill = "white", color = NA),  # add this line
  rect = element_blank(),
  line = element_blank(),
  axis.text.x = element_blank(),
  axis.text.y = element_blank(),
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  axis.ticks = element_blank(),
  legend.direction = "vertical",
  legend.text = element_text(size = 10),
  legend.key.size = unit(0.6, "cm"),
  plot.background = element_rect(fill = "white", color = NA),  # you already have this
  plot.title = element_text(margin = margin(r = 10, b = 10), face = "bold", size = 12, colour = "black", hjust = 0.5),
  plot.subtitle = element_text(size = 9, hjust = 0.5),
  strip.text.x = element_text(size = 13)
  ) +
  guides(fill = guide_legend(reverse = TRUE))

```

Southgate's approach likely drew inspiration from France's success in the World Cup in 2018 and the Euro in 2022. While I do not necessarily disagree with this tactic, England still lacked creativity and shape in attack when they *did* have possession. This was especially true against good to great opposition. In their final three games against the best opposition faced in the tournament, England's chance creation was especially poor.

```{=html}
<!--
## dataset: np xGA per team
-->
```

```{r include=FALSE}

# Total np xG against
np_xG_A <- fact_event %>%
  filter(type.name == "Shot" & (shot.type.name!="Penalty" | is.na(shot.type.name))) %>%
  mutate(
    shot_conceeding_team = ifelse(
      team.name == home_team.home_team_name, 
      away_team.away_team_name, 
      home_team.home_team_name)
    ) %>%
  group_by(shot_conceeding_team) %>%
  summarise(
    xG_conceeded = sum(shot.statsbomb_xg, na.rm = TRUE),
    .groups = "drop"
  )

# Bring in rd of 16 info
np_xG_A <- np_xG_A %>%
  left_join(team_mins, by = c("shot_conceeding_team" = "team")) %>%
  mutate(xG_conceeded_per_90 = (xG_conceeded / total_mins) * 90)

# Round of 16
np_xG_A_16 <- np_xG_A %>%
  filter(rd_16 == 1)
```

```{=html}
<!--
## np xGA per team (dataset)
-->
```

```{r include=FALSE}

# Get England matches
fact_event %>%
  filter(team.name == "England") %>%
  select(match_id) %>%
  distinct()


# Non Penalty xG
np_xG_team <- fact_event %>%
  left_join(dim_match %>% select(match_id, match_date), by = "match_id") %>%
  filter(type.name == "Shot" & (shot.type.name!="Penalty" | is.na(shot.type.name))) %>%
  group_by(match_id, match_date, team.name) %>%
  summarise(
    xG = sum(shot.statsbomb_xg, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(match_id %in% c(3930163, 3930171, 3930181, 3941017, 3942227, 3942819, 3943043))

# New column for opponent
np_xG_team <- np_xG_team %>%
  mutate(team_2 = ifelse(team.name == "England", "England", "Opponent"))

np_xG_team_wide <- np_xG_team %>%
  select(match_id, match_date, team_2, xG) %>%
  pivot_wider(names_from = team_2, values_from = xG) %>%
  left_join(
    np_xG_team %>% filter(team_2 == "Opponent") %>% select(match_id, team.name), by = "match_id"
  ) %>%
  rename(
    England_xG = England,
    Opponent_xG = Opponent,
    Opponent_Name = team.name
  )

np_xG_team_wide <- np_xG_team_wide %>%
  mutate(match_label = paste("vs ", Opponent_Name))

np_xG_team_wide <- np_xG_team_wide %>%
  mutate(
    England_xG = round(England_xG, 2),
    Opponent_xG = round(Opponent_xG, 2)
  )

np_xG_long <- np_xG_team_wide %>%
  pivot_longer(
    cols = c(England_xG, Opponent_xG),
    names_to = "Team",
    values_to = "xG"
  )

np_xG_long <- np_xG_long %>%
  mutate(match_date = as.Date(match_date))

np_xG_long <- np_xG_long %>%
  arrange(match_date) %>%
  mutate(match_label = factor(match_label, levels = unique(match_label)))

```

```{=html}
<!--
## Viz: xG and xGA per match
-->
```

```{r, warning=FALSE, echo=FALSE}
ggplot(np_xG_long, aes(x = match_label, y = xG, fill = Team)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(
    values = c("England_xG" = "navy", "Opponent_xG" = "gray"),
    labels = c("England", "Opponent")
  ) +
  labs(
    title = "England's attack was especially weak in their final three matches",
    subtitle = "England matches Euro 2024",
    x = "Match",
    y = "Non-Penalty xG",
    fill = "Team"
  ) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 12, face = "bold", hjust = 0),
    axis.title.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  ) 

```

So even with their defensive solidity, they did not create enough quality chances to truly compete against the best teams. That said, let's take a closer look at how England *did* progress the ball forward.

## Playing Long

[Progressive metrics](https://www.nytimes.com/athletic/5470579/2024/05/04/progressive-actions-premier-league-explainer) are counting metrics that help identify players who are proactive in pushing the ball forward. Following the definition laid out by John Muller from *The Athletic*, a ***progressive pass*** is a completed pass that is at least 10 meters (11 yards) long and moves the ball at least 25% of the remaining distance to goal.

What is interesting about England's progressive passes is that 15% of them came from their goalkeeper, Jordan Pickford.

```{=html}
<!--
## Progressive passes identifier column
-->
```

```{r include=FALSE}

# Helper column: 1 if completed pass, at least 10 meters, & from open play CompPass_OpenPlay_10M
fact_event <- fact_event %>%
  mutate(CompPass_OpenPlay_10M = case_when(
    type.name == "Pass" & is.na(pass.outcome.name)
    & pass.length >= 10
    & is.na(pass.type.name) ~ 1,
    TRUE ~ 0))

# (location.x, location.y) = starting position
# (goal_x, goal_y) = goal position
# Calculate euclidean distance between these two points
# Does not matter which point is first or second


# Function for Euclidean Distance
#euclidean_distance <- function(x1, x2, y1, y2) {
#  sqrt((x2-x1)^2 + (y2-y1)^2)
#}

# Goal points
#goal_x <- 120
#goal_y <- 40

# New column: Euclidean distance between goal (x2 = 120, y2 = 40) and location before event (x1 = location.x, y1 = location.y)
fact_event <- fact_event %>%
  mutate(GoalDistancePreEvent = euclidean_distance(x2 = 120, x1 = location.x, y2 = 40, y1 = location.y))

# New column: Euclidean distance between goal (x2 = 120, y2 = 40) and location AFTER pass (x1 = pass.end_location.x, y1 = pass.end_location.y)
# pass.end_location.x and pass.end_location.y will be na if type.name != pass
fact_event <- fact_event %>%
  mutate(GoalDistancePostPass = euclidean_distance(x2 = 120, x1 = pass.end_location.x, y2 = 40, y1 = pass.end_location.y))

# We want the distance to go down by at least 25%
# (Old Distance - New Distance) / Old Distance
# Always gives positive % change when distance decreases
# Tells you how much the distance shrank
fact_event <- fact_event %>%
  mutate(GoalDistanceChangePass = (GoalDistancePreEvent - GoalDistancePostPass) / GoalDistancePreEvent)

# Finally, create identifier column for ProgressivePass
fact_event <- fact_event %>%
  mutate(ProgressivePass = case_when(
    CompPass_OpenPlay_10M == 1 & GoalDistanceChangePass >= 0.25 ~ 1,
    TRUE ~ 0))


```

```{=html}
<!--
## Progressive carries identifier column
-->
```

```{r include=FALSE}
# New column: CarryDistance = Euclidean Distance between (locatin.x, location.y) & (carry.end_location.x, carry.end_location.y)
# x2 = carry.end_location.x, x1 = location.x, y2 = carry.end_location.y, y1 = location.y
fact_event <- fact_event %>%
  mutate(CarryDistance = euclidean_distance(x2 = carry.end_location.x,
                                            x1 = location.x,
                                            y2 = carry.end_location.y,
                                            y1 = location.y))


# Use GoalDistancePreEvent

# New column: Euclidean distance between goal (x2 = 120, y2 = 40) and location AFTER CARRY (x1 = pass.end_location.x, y1 = pass.end_location.y)
fact_event <- fact_event %>%
  mutate(GoalDistancePostCarry = euclidean_distance(x2 = 120,
                                                    x1 = carry.end_location.x,
                                                    y2 = 40,
                                                    y1 = carry.end_location.y))



# We want the distance to go down by at least 25%
# (Old Distance - New Distance) / Old Distance
# Always gives positive % change when distance decreases
# Tells you how much the distance shrank
fact_event <- fact_event %>%
  mutate(GoalDistanceChangeCarry = (GoalDistancePreEvent - GoalDistancePostCarry) / GoalDistancePreEvent)

# Finally, create identifier column for ProgressiveCarry
fact_event <- fact_event %>%
  mutate(ProgressiveCarry = case_when(
    CarryDistance >= 10 & GoalDistanceChangeCarry >= 0.15 ~ 1,
    TRUE ~ 0))
```

```{=html}
<!--
## Dataset: Progressive passes & carries by team and player
-->
```

```{r include=FALSE}

# By Team (England slightly below average)
prog_team <- fact_event %>%
  group_by(team.name) %>%
  summarise(
    prog_pass = sum(ProgressivePass == 1, na.rm = TRUE),
    prog_carry = sum(ProgressiveCarry == 1, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  left_join(team_mins, by = c("team.name" = "team")) %>%
  mutate(
    prog_pass_per_90 = (prog_pass / total_mins) * 90,
    prog_carry_per_90 = (prog_carry / total_mins) * 90
  ) %>%
  filter(rd_16 == 1)

# By Player (I need player positions)
prog_player <- fact_event %>%
  group_by(team.name, player.name) %>%
  summarise(
    prog_pass = sum(ProgressivePass == 1, na.rm = TRUE),
    prog_carry = sum(ProgressiveCarry == 1, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(team_player = paste(team.name, player.name, sep = "_")) %>%
  arrange(team.name, desc(prog_pass))

# Add player position to prog_player
prog_player <- prog_player %>%
  left_join(player_position %>% select(team_player, positions), by = "team_player")

# Spain's goalkeeper had similar number of progressive passes. Difference is they had other players with high prog passes too.

# England is similar to Argentina. But Argentina center around Messi.
```

```{=html}
<!--
## Dataset: Goalkeeper percentage of prog pass by team
-->
```

```{r include=FALSE}

prog_gk_team <- prog_team %>%
  select(team.name, team_prog_pass = prog_pass, rd_16, england) %>%
  left_join(prog_player %>%
              select(team.name,
                     player.name,
                     player_prog_pass = prog_pass,
                     positions) %>%
              filter(positions == "Goalkeeper", player_prog_pass > 0),
            by = "team.name") %>%
  # One gk per team
  filter(player.name != "Dayne Tristan St. Clair") %>%
  mutate(player_perc = round((player_prog_pass / team_prog_pass), 4))

# Rd 16
prog_gk_team_16 <- prog_gk_team %>%
  filter(rd_16== 1)

```

```{r, warning=FALSE, echo=FALSE}

# non-penalty xG per 90
ggplot(data = prog_gk_team_16, aes(x = player_perc, y = reorder(team.name, player_perc), fill = factor(england))) +
  geom_bar(stat = "identity") +
  geom_text(
    data = subset(prog_gk_team_16, england == 1),
    aes(label = label_percent(accuracy = 1)(player_perc)),
    hjust = -0.3,
    fontfact = "bold",
    color = "navy",
    size = 5) +
  scale_fill_manual(values = c("1" = "navy", "0" = "gray")) +
  labs(
    title = "% of Team Progressive Passes Made by Goalkeeper",
    subtitle = "Euro & Copa America 2024 | Teams that advanced to the knockout stage"
    ) +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(color = "black", face = "bold", size = 14, hjust = -0.2, vjust = 2),
    plot.subtitle = element_text(color = "black", size = 10, hjust = -0.15, vjust = 2)
    )

```

Among teams that progressed to the knockout stage in the Euros and Copa América, this ranked behind only Romania and Slovenia. While Route 1 can be effective in certain situations, it’s not a strategy many of England's players are accustomed to and not one that is likely to yield consistent success against top sides.

```{=html}
<!--
## Dataset: Heatmap of progressive passes
-->
```

```{r include=FALSE}

#library(grid)

heatmap_prog_pass <- fact_event %>%
  mutate(
    location.x = ifelse(location.x>120, 120, location.x),
    location.y = ifelse(location.y>80, 80, location.y),
    location.x = ifelse(location.x<0, 0, location.x),
    location.y = ifelse(location.y<0, 0, location.y)
  )

heatmap_prog_pass$xbin <- cut(heatmap_prog_pass$location.x, breaks = seq(from=0, to=120, by = 20),include.lowest=TRUE )
heatmap_prog_pass$ybin <- cut(heatmap_prog_pass$location.y, breaks = seq(from=0, to=80, by = 20),include.lowest=TRUE)

heatmap_prog_pass <- heatmap_prog_pass %>%
  filter(ProgressivePass == 1) %>%
  group_by(team.name) %>%
  mutate(total_prog_pass = n()) %>% # New column: total progressive passes per team
  group_by(team.name, xbin, ybin) %>%
  summarise(total_prog_pass = max(total_prog_pass),
            bin_prog_pass = n(),
            bin_pct = bin_prog_pass/total_prog_pass,
            location.x = median(location.x),
            location.y = median(location.y)) %>%
  group_by(xbin, ybin) %>%
  mutate(league_ave = mean(bin_pct)) %>%
  group_by(team.name, xbin, ybin) %>%
  mutate(diff_vs_ave = bin_pct - league_ave) %>%
  ungroup()

```

Another useful progressive metric for evaluating a player's attacking prowess is ***progressive carries***. A progressive carry is an open-play carry at least 10 meters (11 yards) long that moves the ball at least 15% of the remaining distance to goal.

England lagged behind other elite international sides in progressive passing and progressive carries. For example, let's compare England to Euro 2024 champions, Spain.

```{=html}
<!--
## Dataset: for stacked column charts prog passes and carries Engalnd & Spain to compare
-->
```

```{r include=FALSE}

# England data prep

prog_player_england <- prog_player %>%
  filter(team.name == "England") %>%
  select(team.name, player.name, prog_pass, prog_carry, positions) %>%
  mutate(total = prog_pass + prog_carry) %>%   
  pivot_longer(
    cols = c(prog_pass, prog_carry, total),
    names_to = "Type",
    values_to = "Value"
  ) %>%
  filter(!is.na(player.name) & Value > 0)

prog_player_england <- prog_player_england %>%
  mutate(player_label = case_when(
    player.name == "Bukayo Saka" ~ "<b style='color:navy'>Bukayo Saka</b>",
    player.name == "Phil Foden"  ~ "<b style='color:navy'>Phil Foden</b>",
    TRUE ~ player.name
  ))

england_totals <- prog_player_england %>%
  filter(Type %in% c("prog_pass", "prog_carry")) %>%
  group_by(player.name) %>%
  summarise(total = sum(Value, na.rm = TRUE))

prog_player_england <- prog_player_england %>%
  left_join(england_totals, by = "player.name")

# New column for legend
prog_player_england <- prog_player_england %>%
  mutate(`Progressive Action` = case_when(
    Type == "prog_pass" ~ "Pass",
    Type == "prog_carry" ~ "Carry",
    # otherwise keep as is
    TRUE ~ Type
  ))

# Only keep top 11
prog_player_england <- prog_player_england %>%
  filter(total >= 20)


# Spain data prep

prog_player_spain <- prog_player %>%
  filter(team.name == "Spain") %>%
  select(team.name, player.name, prog_pass, prog_carry, positions) %>%
  mutate(
    total = prog_pass + prog_carry,
    player.name = case_when(
      player.name == "Lamine Yamal Nasraoui Ebana" ~ "Lamine Yamal",
      player.name == "Aymeric Laporte" ~ "Laporte",
      player.name == "Nicholas Williams Arthuer" ~ "Nico Williams",
      player.name == "Fabián Ruiz Peña" ~ "Fabián Ruiz",
      player.name == "Marc Cucurella Saseta" ~ "Cucurella",
      player.name == "Rodrigo Hernández Cascante" ~ "Rodri",
      player.name == "Daniel Olmo Carvajal" ~ "Dani Olmo",
      player.name == "Unai Simón Mendibil" ~ "Unai Simón",
      player.name == "Daniel Carvajal Ramos" ~ "Carvajal",
      player.name == "Robin Aime Robert Le Normand" ~ "Le Normand",
      player.name == "Daniel Vivian Moreno" ~ "Vivian",
      player.name == "Alejandro Grimaldo García" ~ "Grimaldo",
      player.name == "José Ignacio Fernández Iglesias" ~ "Nacho",
      player.name == "Pedro González López" ~ "Pedri",
      player.name == "Álvaro Borja Morata Martín" ~ "Morata",
      player.name == "Jesús Navas González" ~ "Jesús Navas",
      player.name == "Martín Zubimendi Ibáñez" ~ "Zubimendi",
      player.name == "Mikel Oyarzabal Ugarte" ~ "Oyarzabal",
      player.name == "Mikel Merino Zazón" ~ "Merino",
      player.name == "Ferrán Torres García" ~ "Ferran Torres",
      player.name == "José Luis Sanmartín Mato" ~ "Joselu",
      player.name == "Alejandro Baena Rodríguez" ~ "Baena",
      player.name == "Fermín López Marín" ~ "Fermín López",
      player.name == "Ayooze Pérez Gutiérrez" ~ "Ayooze Pérez",
      player.name == "David Raya Martín" ~ "David Raya",
      TRUE ~ player.name  # keep as-is if not matched
    )
  ) %>%
  pivot_longer(
    cols = c(prog_pass, prog_carry, total),
    names_to = "Type",
    values_to = "Value"
  ) %>%
  filter(!is.na(player.name) & Value > 0)

prog_player_spain <- prog_player_spain %>%
  mutate(player_label = case_when(
    player.name == "Lamine Yamal" ~ "<b style='color:#AA151B'>Lamine Yamal</b>",
    player.name == "Nico Williams"  ~ "<b style='color:#AA151B'>Nico Williams</b>",
    TRUE ~ player.name
  ))

spain_totals <- prog_player_spain %>%
  filter(Type %in% c("prog_pass", "prog_carry")) %>%
  group_by(player.name) %>%
  summarise(total = sum(Value, na.rm = TRUE))

prog_player_spain <- prog_player_spain %>%
  left_join(spain_totals, by = "player.name")

# New column for legend
prog_player_spain <- prog_player_spain %>%
  mutate(`Progressive Action` = case_when(
    Type == "prog_pass" ~ "Pass",
    Type == "prog_carry" ~ "Carry",
    # otherwise keep as is
    TRUE ~ Type
  ))

# Only keep top 11
prog_player_spain <- prog_player_spain %>%
  filter(total >= 19)

```

```{=html}
<!--
## Viz: England & Spain progressive passes and carries
-->
```

```{r, warning=FALSE, echo=FALSE}

pp1 <- ggplot(
  data = prog_player_england %>% filter(Type != "total"),
    aes(y = reorder(player_label, total), x = Value, fill = `Progressive Action`)) +
  geom_bar(stat = "identity") +
  geom_text(
    data = prog_player_england %>% filter(Type == "total"),
    aes(x = Value, label = Value),  
    hjust = -0.2,
    size = 3
  ) +
  scale_fill_manual(values = c(
    "Pass" = "#4682B4",
    "Carry" = "#F4A261"
  )) +
  scale_x_continuous(limits = c(0, 100)) +
  labs(title = "England") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    axis.text.y = ggtext::element_markdown(),
    plot.title = element_text(color = "navy", face = "bold", size = 12, hjust = -0.4, vjust = 1)
    )



# Spain
pp2 <- ggplot(
  data = prog_player_spain %>% filter(Type != "total"),
    aes(y = reorder(player_label, total), x = Value, fill = `Progressive Action`)) +
  geom_bar(stat = "identity") +
  geom_text(
    data = prog_player_spain %>% filter(Type == "total"),
    aes(x = Value, label = Value),  
    hjust = -0.2,
    size = 3
  ) +
  scale_fill_manual(values = c(
    "Pass" = "#4682B4",
    "Carry" = "#F4A261"
  )) +
  scale_x_continuous(limits = c(0, 100)) +
  labs(title = "Spain") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid = element_blank(),
    axis.text.y = ggtext::element_markdown(),
    plot.title = element_text(color = "#AA151B", face = "bold", size = 12, hjust = -0.4, vjust = 1)
    )

# 1 x 2 grid for the two plots
grid_pp <- plot_grid(pp1, pp2, ncol = 2)

# Title and subtitle with custom colors
title_pp <- ggdraw() +
  geom_richtext(
    aes(
      x = 0, y = 0.5,
      label = "<span style='color:#4682B4'><b>Progressive Passes</b></span> and <span style='color:#F4A261'><b>Progressive Carries</b></span> by Player"
    ),
    fill = NA, label.color = NA, hjust = 0, size = 6
  ) +
  geom_richtext(
    aes(
      x = 0, y = 0.2,
      label = "England & Spain Euro 2024 | Top 11 Players"
    ),
    fill = NA, label.color = NA, hjust = 0, size = 4.5
  ) +
  theme_void()

# Combine title and plot grid into a final plot
final_plot_pp <- plot_grid(title_pp, grid_pp, ncol = 1, rel_heights = c(0.2, 1))

# Print the final plot
print(final_plot_pp)


```

Spain totaled 228 progressive passes compared to England's 187, and 284 progressive carries compared to England's 210.

What stands out first is England's inability to get one of their most creative players, Phil Foden, into positions where he could make his mark on the match. Foden recorded only four progressive passes the entire tournament.

In contrast, Spain consistently fed the ball to their dynamic wide players, Lamine Yamal and Nico Williams. Aymeric Laporte recorded more than twice as many progressive passes and carries as England's two center-backs, Stones and Guehi, combined. This illustrates Spain's commitment to something England did not do: ***effectively build up from the back***. Laporte set the tempo for Spain, and their organized structure created space for their two dynamic wingers to take on defenders, play line-breaking passes, and create goal scoring opportunities.

It is also worth noting that Spain did not sacrifice defensive solidity for their outstanding progressive metrics. They still conceeded slightly less non-penalty xG per 90 than England did throughout the tournament (0.74 vs 0.71).

## Spacing

Another potential explanation for England's low progressive numbers was their spacing, or lack thereof, in possession. For Manchester City in the 23-24 season, Phil Foden naturally drifted into central areas, where he was often able to pick up the ball in space, then sprint forward with the ball at back-pedaling defenders. Foden did a similar thing with England early on in the tournament, but it often led to Foden and Jude Bellingham occupying very similar zones. For example, in England's first match against Serbia, Foden and Bellingham had an almost identical average pass location. The two play-makers were in each other's way, and this made England much easier to defend.

```{=html}
<!--
## Data: England passing network vs Serbia (match 1)
-->
```

```{r include=FALSE}

match_data <- fact_event %>%
  filter(match_id == 3930163)

# Check for index of first sub
sub <- match_data %>%
  filter(type.name == "Substitution", team.name == "England") %>%
  slice(1) %>% # grabs rows by their row position
  pull(index) # Extracts single column as a vector, not a data frame or tibble

# make df with successful passes by team until the first substitution
mask <- match_data %>%
  filter(
    type.name == "Pass",
    team.name == "England",
    index < sub,
    is.na(pass.outcome.name),
    (is.na(pass.type.name) | pass.type.name != "Throw-in")
  )

# Take necessary columns
df_pass <- mask %>%
  select(
    location.x,
    location.y,
    pass.end_location.x,
    pass.end_location.y,
    player.name,
    pass.recipient.name)

# Adjust player names if necessary later (e.g. Spain)

##############################################################################

# Calculating vertices size and location

#library(purrr)
#library(tibble)

# Get unique player names
players <- unique(df_pass$player.name)

# Create scatter_df by mapping over each player
scatter_df <- map_dfr(seq_along(players), function(i) {
  name <- players[i]
  
  passx <- df_pass %>% filter(player.name == name) %>% pull(location.x)
  recx  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.x)
  passy <- df_pass %>% filter(player.name == name) %>% pull(location.y)
  recy  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.y)
  
  x_avg <- mean(c(passx, recx), na.rm = TRUE)
  y_avg <- mean(c(passy, recy), na.rm = TRUE)
  
  no_passes <- df_pass %>% filter(player.name == name) %>% nrow()
  
  tibble(
    player.name = name,
    x = x_avg,
    y = y_avg,
    no = no_passes
  )
})

# Add scaled marker size
scatter_df <- scatter_df %>%
  mutate(marker_size = (no / max(no)) * 1500) # 1500 is like making font size bigger

##############################################################################
# Calculating edges (lines) width
  # Passes between players
  # Group by passer_recipient

# Step 1: Create pair_key from sorted player names
df_pass <- df_pass %>%
  mutate(pair_key = map2_chr(player.name, pass.recipient.name, ~ str_c(sort(c(.x, .y)), collapse = "_")))

# Step 2: Count number of passes per player pair
lines_df <- df_pass %>%
  group_by(pair_key) %>%
  summarise(pass_count = n(), .groups = "drop")

# Step 3: Filter pairs with more than 2 passes
lines_df <- lines_df %>%
  filter(pass_count > 2)

##############################################################################
#Plot vertices (players) & edges (lines)


# edges query
edges <- lines_df %>%
  separate(pair_key, into = c("player1", "player2"), sep = "_", remove = FALSE) %>%
  left_join(scatter_df %>% select(player1 = player.name, x1 = x, y1 = y), by = "player1") %>%
  left_join(scatter_df %>% select(player2 = player.name, x2 = x, y2 = y), by = "player2") %>%
  mutate(line_width = pass_count / max(pass_count) * 10)


```

```{=html}
<!--
## Viz: England passing network vs Serbia
-->
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
ppp1 <- 
  
  create_Pitch() +
  # 1. Add lines first (goes in background)
geom_segment(data = edges,
             aes(x = x1, y = y1, xend = x2, yend = y2, size = pass_count),
             color = "gray40", lineend = "round", alpha = 0.6,
             show.legend = FALSE) +
  
  # 2. Add circles (vertices)
  geom_point(data = scatter_df,
             aes(x = x, y = y, size = marker_size),
             shape = 21, fill = "red", color = "black", alpha = 0.3) +
  
  # 3. Add player names last so they’re on top
  geom_text(data = scatter_df,
            aes(x = x, y = y, label = player.name),
            color = "black", size = 3.5, vjust = 2, hjust = 0.5) +
  scale_size(range = c(0.5, 4)) +
  theme(
    legend.position = "none"
  ) +
  coord_fixed(ratio = 105/100) +
  coord_flip() +
  labs(
    title = "England vs. Serbia",
    subtitle = "Euro 2024 | Group Stage Match 1",
  )  +
  theme_minimal() +
theme(
  plot.title.position = "plot",
  plot.title = element_text(size = 14, face = "bold", hjust = 0),
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  axis.text.x = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.x = element_blank(),
  axis.ticks.y = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  legend.position = "none"
  ) +

# Suppress legend
guides(size = "none")


# Create your custom legend as a separate ggdraw object
legend_pitch_ppp1 <- ggdraw() +
  draw_label("Lines = Passing Frequency\nCircle Size = Number of Passes\nData before first substitution",
             x = 0, hjust = 0, size = 12, fontface = "plain")

# Combine them vertically
final_plot_ppp1 <- plot_grid(
  ppp1,
  legend_pitch_ppp1,
  ncol = 1,
  rel_heights = c(1, 0.15)  # smaller height for legend
)

print(final_plot_ppp1)

```

After trying Alexander-Arnold and Connor Gallagher at right 8 and getting similar results in the next two group stage matches, England changed their midfield formation against Slovakia in their first knockout match. Instead of playing Declan Rice as a single pivot, Southgate changed to a midfield double pivot with Rice and Kobbie Mainoo.

```{=html}
<!--
## Data: England passing network vs Slovakia (match 4)
-->
```

```{r include=FALSE}

match_data <- fact_event %>%
  filter(match_id == 3941017)

# Check for index of first sub
sub <- match_data %>%
  filter(type.name == "Substitution", team.name == "England") %>%
  slice(1) %>% # grabs rows by their row position
  pull(index) # Extracts single column as a vector, not a data frame or tibble

# make df with successful passes by team until the first substitution
mask <- match_data %>%
  filter(
    type.name == "Pass",
    team.name == "England",
    index < sub,
    is.na(pass.outcome.name),
    (is.na(pass.type.name) | pass.type.name != "Throw-in")
  )

# Take necessary columns
df_pass <- mask %>%
  select(
    location.x,
    location.y,
    pass.end_location.x,
    pass.end_location.y,
    player.name,
    pass.recipient.name)

# Adjust player names if necessary later (e.g. Spain)

##############################################################################

# Calculating vertices size and location

#library(purrr)
#library(tibble)

# Get unique player names
players <- unique(df_pass$player.name)

# Create scatter_df by mapping over each player
scatter_df <- map_dfr(seq_along(players), function(i) {
  name <- players[i]
  
  passx <- df_pass %>% filter(player.name == name) %>% pull(location.x)
  recx  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.x)
  passy <- df_pass %>% filter(player.name == name) %>% pull(location.y)
  recy  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.y)
  
  x_avg <- mean(c(passx, recx), na.rm = TRUE)
  y_avg <- mean(c(passy, recy), na.rm = TRUE)
  
  no_passes <- df_pass %>% filter(player.name == name) %>% nrow()
  
  tibble(
    player.name = name,
    x = x_avg,
    y = y_avg,
    no = no_passes
  )
})

# Add scaled marker size
scatter_df <- scatter_df %>%
  mutate(marker_size = (no / max(no)) * 1500) # 1500 is like making font size bigger

##############################################################################
# Calculating edges (lines) width
  # Passes between players
  # Group by passer_recipient

# Step 1: Create pair_key from sorted player names
df_pass <- df_pass %>%
  mutate(pair_key = map2_chr(player.name, pass.recipient.name, ~ str_c(sort(c(.x, .y)), collapse = "_")))

# Step 2: Count number of passes per player pair
lines_df <- df_pass %>%
  group_by(pair_key) %>%
  summarise(pass_count = n(), .groups = "drop")

# Step 3: Filter pairs with more than 2 passes
lines_df <- lines_df %>%
  filter(pass_count > 2)

##############################################################################
#Plot vertices (players) & edges (lines)


# edges query
edges <- lines_df %>%
  separate(pair_key, into = c("player1", "player2"), sep = "_", remove = FALSE) %>%
  left_join(scatter_df %>% select(player1 = player.name, x1 = x, y1 = y), by = "player1") %>%
  left_join(scatter_df %>% select(player2 = player.name, x2 = x, y2 = y), by = "player2") %>%
  mutate(line_width = pass_count / max(pass_count) * 10)


```

```{=html}
<!--
## Viz: England passing network vs Slovakia (match 4)
-->
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
ppp1 <- 
  
  create_Pitch() +
  # 1. Add lines first (goes in background)
geom_segment(data = edges,
             aes(x = x1, y = y1, xend = x2, yend = y2, size = pass_count),
             color = "gray40", lineend = "round", alpha = 0.6,
             show.legend = FALSE) +
  
  # 2. Add circles (vertices)
  geom_point(data = scatter_df,
             aes(x = x, y = y, size = marker_size),
             shape = 21, fill = "red", color = "black", alpha = 0.3) +
  
  # 3. Add player names last so they’re on top
  geom_text(data = scatter_df,
            aes(x = x, y = y, label = player.name),
            color = "black", size = 3.5, vjust = 2, hjust = 0.5) +
  scale_size(range = c(0.5, 4)) +
  theme(
    legend.position = "none"
  ) +
  coord_fixed(ratio = 105/100) +
  coord_flip() +
  labs(
    title = "England vs. Slovakia",
    subtitle = "Euro 2024 | Knockout Stage Round of 16",
  )  +
  theme_minimal() +
theme(
  plot.title.position = "plot",
  plot.title = element_text(size = 14, face = "bold", hjust = 0),
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  axis.text.x = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.x = element_blank(),
  axis.ticks.y = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  legend.position = "none"
  ) +

# Suppress legend
guides(size = "none")


# Create your custom legend as a separate ggdraw object
legend_pitch_ppp1 <- ggdraw() +
  draw_label("Lines = Passing Frequency\nCircle Size = Number of Passes\nData before first substitution",
             x = 0, hjust = 0, size = 12, fontface = "plain")

# Combine them vertically
final_plot_ppp1 <- plot_grid(
  ppp1,
  legend_pitch_ppp1,
  ncol = 1,
  rel_heights = c(1, 0.15)  # smaller height for legend
)

print(final_plot_ppp1)

```

Although this was successful in creating more space and better passing triangles, with Foden staying wide and Rice linking play, Harry Kane struggled to get involved. For the entire match, Kane had only seven receptions and four passes, never combining with the same player more than twice.

Against Switzerland, Kane's passing network show that he tried to get more involved. Kane is great because he can drop deep and create, which is what he tried to do against Switerland. However, similar to Foden creating congestion by doing what he does best, Kane further congested space and muddled up passing networks.

```{=html}
<!--
## Data: England passing network vs Switerland (match 5)
-->
```

```{r include=FALSE}

match_data <- fact_event %>%
  filter(match_id == 3942227)

# Check for index of first sub
sub <- match_data %>%
  filter(type.name == "Substitution", team.name == "England") %>%
  slice(1) %>% # grabs rows by their row position
  pull(index) # Extracts single column as a vector, not a data frame or tibble

# make df with successful passes by team until the first substitution
mask <- match_data %>%
  filter(
    type.name == "Pass",
    team.name == "England",
    index < sub,
    is.na(pass.outcome.name),
    (is.na(pass.type.name) | pass.type.name != "Throw-in")
  )

# Take necessary columns
df_pass <- mask %>%
  select(
    location.x,
    location.y,
    pass.end_location.x,
    pass.end_location.y,
    player.name,
    pass.recipient.name)

# Adjust player names if necessary later (e.g. Spain)

##############################################################################

# Calculating vertices size and location

#library(purrr)
#library(tibble)

# Get unique player names
players <- unique(df_pass$player.name)

# Create scatter_df by mapping over each player
scatter_df <- map_dfr(seq_along(players), function(i) {
  name <- players[i]
  
  passx <- df_pass %>% filter(player.name == name) %>% pull(location.x)
  recx  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.x)
  passy <- df_pass %>% filter(player.name == name) %>% pull(location.y)
  recy  <- df_pass %>% filter(pass.recipient.name == name) %>% pull(pass.end_location.y)
  
  x_avg <- mean(c(passx, recx), na.rm = TRUE)
  y_avg <- mean(c(passy, recy), na.rm = TRUE)
  
  no_passes <- df_pass %>% filter(player.name == name) %>% nrow()
  
  tibble(
    player.name = name,
    x = x_avg,
    y = y_avg,
    no = no_passes
  )
})

# Add scaled marker size
scatter_df <- scatter_df %>%
  mutate(marker_size = (no / max(no)) * 1500) # 1500 is like making font size bigger

##############################################################################
# Calculating edges (lines) width
  # Passes between players
  # Group by passer_recipient

# Step 1: Create pair_key from sorted player names
df_pass <- df_pass %>%
  mutate(pair_key = map2_chr(player.name, pass.recipient.name, ~ str_c(sort(c(.x, .y)), collapse = "_")))

# Step 2: Count number of passes per player pair
lines_df <- df_pass %>%
  group_by(pair_key) %>%
  summarise(pass_count = n(), .groups = "drop")

# Step 3: Filter pairs with more than 2 passes
lines_df <- lines_df %>%
  filter(pass_count > 2)

##############################################################################
#Plot vertices (players) & edges (lines)


# edges query
edges <- lines_df %>%
  separate(pair_key, into = c("player1", "player2"), sep = "_", remove = FALSE) %>%
  left_join(scatter_df %>% select(player1 = player.name, x1 = x, y1 = y), by = "player1") %>%
  left_join(scatter_df %>% select(player2 = player.name, x2 = x, y2 = y), by = "player2") %>%
  mutate(line_width = pass_count / max(pass_count) * 10)


```

```{=html}
<!--
## Viz: England passing network vs Switerland (match 5)
-->
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
ppp1 <- 
  
  create_Pitch() +
  # 1. Add lines first (goes in background)
geom_segment(data = edges,
             aes(x = x1, y = y1, xend = x2, yend = y2, size = pass_count),
             color = "gray40", lineend = "round", alpha = 0.6,
             show.legend = FALSE) +
  
  # 2. Add circles (vertices)
  geom_point(data = scatter_df,
             aes(x = x, y = y, size = marker_size),
             shape = 21, fill = "red", color = "black", alpha = 0.3) +
  
  # 3. Add player names last so they’re on top
  geom_text(data = scatter_df,
            aes(x = x, y = y, label = player.name),
            color = "black", size = 3.5, vjust = 2, hjust = 0.5) +
  scale_size(range = c(0.5, 4)) +
  theme(
    legend.position = "none"
  ) +
  coord_fixed(ratio = 105/100) +
  coord_flip() +
  labs(
    title = "England vs. Switzerland",
    subtitle = "Euro 2024 | Round of 8",
  )  +
  theme_minimal() +
theme(
  plot.title.position = "plot",
  plot.title = element_text(size = 14, face = "bold", hjust = 0),
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  axis.text.x = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.x = element_blank(),
  axis.ticks.y = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  legend.position = "none"
  ) +

# Suppress legend
guides(size = "none")


# Create your custom legend as a separate ggdraw object
legend_pitch_ppp1 <- ggdraw() +
  draw_label("Lines = Passing Frequency\nCircle Size = Number of Passes\nData before first substitution",
             x = 0, hjust = 0, size = 12, fontface = "plain")

# Combine them vertically
final_plot_ppp1 <- plot_grid(
  ppp1,
  legend_pitch_ppp1,
  ncol = 1,
  rel_heights = c(1, 0.15)  # smaller height for legend
)

print(final_plot_ppp1)

```

Kane has been England’s captain for years and was probably undroppable in Southgate’s view. However, his tendency to drop in, link play, and serve as a creator seem to be redundant for England. Ollie Watkins may have been the better option, as someone who is more direct and can run in behind. A player of Watkins profile could open up space for Foden to operate in attacking midfield positions, and record more progressive carries in the attacking third.

## Corner Kick Production

Finally, England scored zero goals from corners. On their roster, they had Declan Rice and Bukayo Saka, who both took corners for Arsenal in the 2023/2024 season. That year, Arsenal scored 16 goals from corners, matching the single-season Premier League record. But for England, both players combined took a total of zero corner kicks. By simply not putting the best deliverers of the ball to take in-swinging corners, Southgate passed up on creating better goal scoring opportunities.

## USA Basketball 2004?

Maybe this is a stretch, but England’s performance at Euro 2024 feels a lot like USA Basketball’s bronze medal run at the 2004 Olympics. Both squads were loaded with stars, but neither team found the cohesion necessary to succeed as a unit.

In 2008, Coach K led his first USA Olympic team. The roster still featured major stars like LeBron James, Dwyane Wade, and Carmelo Anthony, but it also included role players who served as specialists. Instead of ball-dominant Allen Iverson, Coach K brought in veteran point guard Jason Kidd. Rather than including Shawn Marion, whose skill set overlapped with Carmelo and LeBron, he opted for a TayShaun Prince, a defensive specialist. And while Michael Redd's NBA 2K rating may have been much lower than Joe Johnson's, he was a more effective spot-up shooter and filled a clearer need for the team.

Perhaps Thomas Tuchel should take a page out of Coach K’s playbook for the 2026 World Cup, starting with Harry Kane. Given the rest of England’s attacking options, Kane’s skill set may be redundant. A more direct striker who runs in behind could better complement the team’s creative midfielders. Ollie Watkins fits that profile and arguably should have started over Kane during Euro 2024. His style of play could have created more space for central playmakers like Jude Bellingham to operate.

Similarly, instead of shoehorning Phil Foden into the same space as Bellingham, why not deploy someone with pace and verticality alongside him? Anthony Gordon fits the bill.

If England want to finally translate their golden generation into glory, they’ll need to think less like a fantasy team and more like a team with purpose. Coach K did it in 2008. Maybe England can do it in 2026.
